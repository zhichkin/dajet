using Npgsql;
using System.Buffers;
using System.Data;
using System.Text;

namespace DaJet.Data
{
    public sealed class PropertyMapper
    {
        public PropertyMapper() { }
        public int YearOffset { get; set; } = 0;
        public string Name { get; set; } = string.Empty;
        public bool IsDbGenerated { get; set; } = false;
        public UnionType DataType { get; set; } = new();
        public Type Type { get { return UnionType.MapToType(DataType); } }
        public Dictionary<UnionTag, ColumnMapper> Columns { get; } = new();
        public List<ColumnMapper> ColumnSequence
        {
            get
            {
                List<ColumnMapper> sequence = new();

                foreach (var item in Columns.OrderBy(item => item.Key))
                {
                    sequence.Add(item.Value);
                }

                return sequence;
            }
        }
        public ColumnMapper MapColumn(UnionTag tag)
        {
            ColumnMapper column;

            if (Columns.TryGetValue(tag, out column))
            {
                return column;
            }

            if (tag == UnionTag.Entity && Columns.TryGetValue(UnionTag.Uuid, out column))
            {
                return column; // convertion of Uuid to Entity 
            }
            else if (tag == UnionTag.Uuid && Columns.TryGetValue(UnionTag.Entity, out column))
            {
                return column; // convertion of Entity to Uuid
            }
            else if (tag == UnionTag.Numeric && Columns.TryGetValue(UnionTag.Version, out column))
            {
                return column; //TODO: convertion of numeric to bigint (VECTOR function hack)
            }

            return column;
        }
        public bool TryMapColumn(UnionTag tag, out ColumnMapper column)
        {
            column = MapColumn(tag);
            return (column is not null);
        }
        public override string ToString() { return $"{Name} {DataType}"; }

        public object GetValue(in IDataReader reader)
        {
            if (Columns.Count == 0)
            {
                return null;
            }
            else if (Columns.Count == 1)
            {
                return GetSingleValue(in reader);
            }
            else
            {
                return GetMultipleValue(in reader);
            }
        }
        private int GetOrdinal(in IDataReader reader, UnionTag tag, out ColumnMapper column)
        {
            if (Columns.Count == 1)
            {
                //TODO: optimize getting ordinal

                //column = Columns[tag];

                //if (column.Ordinal == -1)
                //{
                //    return reader.GetOrdinal(string.IsNullOrEmpty(column.Alias) ? column.Name : column.Alias);
                //}
                //else
                //{
                //    return column.Ordinal;
                //}
            }

            if (!Columns.TryGetValue(tag, out column) || column == null)
            {
                return -1;
            }

            if (column.Ordinal > -1)
            {
                return column.Ordinal;
            }

            return reader.GetOrdinal(string.IsNullOrEmpty(column.Alias) ? column.Name : column.Alias);
        }
        private object GetSingleValue(in IDataReader reader)
        {
            if (DataType.IsBoolean) { return GetBoolean(in reader); }
            else if (DataType.IsNumeric) { return GetNumeric(in reader); }
            else if (DataType.IsDateTime) { return GetDateTime(in reader); }
            else if (DataType.IsString) { return GetString(in reader); }
            else if (DataType.IsBinary) { return GetBinary(in reader); }
            else if (DataType.IsUuid) { return GetUuid(in reader); }
            else if (DataType.IsEntity) { return GetEntity(in reader); }
            else if (DataType.IsVersion) { return GetVersion(in reader); }
            else if (DataType.IsInteger) { return GetInteger(in reader); }

            throw new NotSupportedException($"Unsupported: {DataType}");
        }
        private object GetMultipleValue(in IDataReader reader)
        {
            int ordinal = GetOrdinal(in reader, UnionTag.Tag, out _);

            if (ordinal == -1) // Union value without _TYPE discriminator field
            {
                return GetEntity(in reader);
            }

            if (reader.IsDBNull(ordinal))
            {
                return Union.Undefined;
            }

            // _TYPE binary(1) - may be generated by query engine if value is not stored in the database
            // TAG value is generated by query engine in case data type addition operation takes place !
            byte tag = ((byte[])reader.GetValue(ordinal))[0];

            object value;

            if (tag == 1) // Неопределено
            {
                return Union.Undefined;
            }
            else if (tag == 2) // Булево
            {
                value = GetBoolean(in reader);
                return (value == null ? Union.Undefined : new Union.CaseBoolean((bool)value));
            }
            else if (tag == 3) // Число
            {
                value = GetNumeric(in reader);
                return (value == null ? Union.Undefined : new Union.CaseNumeric((decimal)value));
            }
            else if (tag == 4) // Дата
            {
                value = GetDateTime(in reader);
                return (value == null ? Union.Undefined : new Union.CaseDateTime((DateTime)value));
            }
            else if (tag == 5) // Строка
            {
                value = GetString(in reader);
                return (value == null ? Union.Undefined : new Union.CaseString((string)value));
            }
            else if (tag == 6) // ДвоичныеДанные
            {
                value = GetBinary(in reader);
                return (value == null ? Union.Undefined : new Union.CaseBinary((byte[])value));
            }
            else if (tag == 7) // УникальныйИдентификатор
            {
                value = GetUuid(in reader);
                return (value == null ? Union.Undefined : new Union.CaseUuid((Guid)value));
            }
            else if (tag == 8) // Ссылка
            {
                value = GetEntity(in reader);
                return (value == null ? Union.Undefined : new Union.CaseEntity((Entity)value));
            }
            else if (tag == 9) // ВерсияДанных
            {
                value = GetVersion(in reader);
                return (value == null ? Union.Undefined : new Union.CaseVersion((ulong)value));
            }
            else if (tag == 10) // Целое число со знаком
            {
                value = GetInteger(in reader);
                return (value == null ? Union.Undefined : new Union.CaseInteger((int)value));
            }

            throw new InvalidOperationException($"Invalid union tag value: [{tag}]");
        }

        //TODO: !!! (PropertyMapper) implement IsDbNull property + public non-nullable typed value getters

        #region "TYPED VALUE GETTERS"
        private object GetBoolean(in IDataReader reader)
        {
            int ordinal = GetOrdinal(in reader, UnionTag.Boolean, out ColumnMapper column);

            if (reader.IsDBNull(ordinal))
            {
                return null;
            }

            bool value;

            if (reader.GetFieldType(ordinal) == typeof(bool))
            {
                value = reader.GetBoolean(ordinal); // PostgreSql
            }
            else
            {
                value = (((byte[])reader.GetValue(ordinal))[0] == 1); // SqlServer
            }

            //TODO: убрать этот костыль в класс DataMapper _Folder
            if (column.Name == "_Folder" || column.Name == "_folder")
            {
                return !value; // invert - exceptional 1C case
            }
            else
            {
                return value; 
            }
        }
        private object GetNumeric(in IDataReader reader)
        {
            int ordinal = GetOrdinal(in reader, UnionTag.Numeric, out ColumnMapper column);

            if (reader.IsDBNull(ordinal))
            {
                return null;
            }

            //TODO: убрать этот костыль в класс DataMapper _KeyField
            if (column.Name == "_KeyField") // binary(4)
            {
                //NOTE: the value is stored as unsigned big-endian !!!
                return Convert.ToDecimal(DbUtilities.GetInt32((byte[])reader.GetValue(ordinal)));
            }

            Type type = reader.GetFieldType(ordinal);

            if (type == typeof(int))
            {
                return new decimal(reader.GetInt32(ordinal));
            }
            else if (type == typeof(long))
            {
                return new decimal(reader.GetInt64(ordinal));
            }
            else if (type == typeof(byte))
            {
                return new decimal(reader.GetByte(ordinal));
            }
            else if (type == typeof(byte[])) // binary(4) TRef
            {
                byte[] value = (byte[])reader.GetValue(ordinal);
                return Convert.ToDecimal(DbUtilities.GetInt32(value));
            }
            else
            {
                return reader.GetDecimal(ordinal);
            }
        }
        private object GetDateTime(in IDataReader reader)
        {
            int ordinal = GetOrdinal(in reader, UnionTag.DateTime, out _);

            if (reader.IsDBNull(ordinal))
            {
                return null;
            }

            return reader.GetDateTime(ordinal).AddYears(-YearOffset);
        }
        private object GetString(in IDataReader reader)
        {
            int ordinal = GetOrdinal(in reader, UnionTag.String, out _);

            if (reader.IsDBNull(ordinal)) { return null; }

            if (reader is not NpgsqlDataReader postgres)
            {
                return reader.GetString(ordinal);
            }
            
            string typeName = postgres.GetPostgresType(ordinal).Name;

            if (typeName == "mchar" || typeName == "mvarchar")
            {

                int size = 1024;
                long length;
                long offset = 0;
                string text = string.Empty;

                byte[] buffer = ArrayPool<byte>.Shared.Rent(size);

                do
                {
                    length = postgres.GetBytes(ordinal, offset, buffer, 0, size);

                    offset += length;

                    if (length > 0)
                    {
                        text += Encoding.Unicode.GetString(buffer, 0, (int)length);
                    }
                }
                while (length > 0);
                
                ArrayPool<byte>.Shared.Return(buffer);
                
                return text;
            }
            else
            {
                return postgres.GetString(ordinal);
            }
        }
        private object GetBinary(in IDataReader reader)
        {
            int ordinal = GetOrdinal(in reader, UnionTag.Binary, out _);

            if (reader.IsDBNull(ordinal)) { return null; }

            if (reader is not NpgsqlDataReader postgres)
            {
                return ((byte[])reader.GetValue(ordinal));
            }

            string typeName = postgres.GetPostgresType(ordinal).Name;
            
            if (typeName == "integer") //TODO: поле _version в PostgreSQL
            {
                return BitConverter.GetBytes(reader.GetInt32(ordinal));
            }
            else
            {
                return ((byte[])reader.GetValue(ordinal));
            }   
        }
        private object GetUuid(in IDataReader reader)
        {
            int ordinal = GetOrdinal(in reader, UnionTag.Uuid, out _);

            if (reader.IsDBNull(ordinal))
            {
                return null;
            }

            Type type = reader.GetFieldType(ordinal);

            if (type == typeof(byte[]))
            {
                byte[] buffer = new byte[16];

                _ = reader.GetBytes(ordinal, 0, buffer, 0, 16);

                return new Guid(buffer);
            }
            else if (type == typeof(Guid))
            {
                return reader.GetGuid(ordinal);
            }

            throw new InvalidOperationException("Invalid UUID value");
        }
        private object GetEntity(in IDataReader reader)
        {
            int ordinal = GetOrdinal(in reader, UnionTag.Entity, out _);

            if (ordinal == -1)
            {
                throw new InvalidOperationException("Entity column mapping is not found");
            }

            if (reader.IsDBNull(ordinal))
            {
                return null;
            }

            Guid identity = new((byte[])reader.GetValue(ordinal)); // binary(16)

            if (Columns.Count == 1) // single reference type value - RRef
            {
                return new Entity(DataType.TypeCode, identity);
            }

            ordinal = GetOrdinal(in reader, UnionTag.TypeCode, out _);

            if (ordinal == -1) // union having single reference type
            {
                return new Entity(DataType.TypeCode, identity);
            }

            if (reader.IsDBNull(ordinal))
            {
                return null;
            }

            int typeCode = DbUtilities.GetInt32((byte[])reader.GetValue(ordinal)); // binary(4)

            return new Entity(typeCode, identity);
        }
        private object GetVersion(in IDataReader reader)
        {
            int ordinal = GetOrdinal(in reader, UnionTag.Version, out _);

            if (reader.IsDBNull(ordinal))
            {
                return null;
            }

            if (reader.GetFieldType(ordinal) == typeof(byte[]))
            {
                //TODO: cast binary(8) to bigint at database level ?
                //NOTE: SQL Server rowversion is unsigned big-endian value !!!
                return DbUtilities.GetInt64((byte[])reader.GetValue(ordinal));
            }
            else
            {
                return reader.GetInt64(ordinal);
            }
        }
        private object GetInteger(in IDataReader reader)
        {
            int ordinal = GetOrdinal(in reader, UnionTag.Integer, out _);

            if (reader.IsDBNull(ordinal))
            {
                return null;
            }

            Type type = reader.GetFieldType(ordinal);

            if (type == typeof(byte[]))
            {
                //TODO: cast binary(4) to int at database level ?
                //NOTE: the value can be stored as unsigned big-endian !!!
                return DbUtilities.GetInt32((byte[])reader.GetValue(ordinal));
            }
            else if (type == typeof(long))
            {
                return reader.GetInt64(ordinal);
            }
            else
            {
                return reader.GetInt32(ordinal);
            }
        }
        #endregion
    }
}

// Исключения из правил:
// - _KeyField (табличная часть) binary(4) -> int CanBeNumeric
// - _Folder (иерархические ссылочные типы) binary(1) -> bool инвертировать !!!
// - _Version (ссылочные типы) timestamp binary(8) -> IsBinary
// - _Type (тип значений характеристики) varbinary(max) -> IsBinary nullable
// - _RecordKind (вид движения накопления) numeric(1) CanBeNumeric Приход = 0, Расход = 1
// - _DimHash numeric(10) ?

// NOTE: SQL Server rowversion is unsigned big-endian value
// NOTE: 1C binary(4) is integer, unsigned big-endian value